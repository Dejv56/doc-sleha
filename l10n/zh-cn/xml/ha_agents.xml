<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ha_agents.xml" version="5.0" xml:id="cha-ha-agents">
 <title>Adding or Modifying Resource Agents</title>
 <info>
      <abstract>
        <para>
    All tasks that need to be managed by a cluster must be available as a
    resource. There are two major groups here to consider: resource agents
    and STONITH agents. For both categories, you can add your own
    agents, extending the abilities of the cluster to your own needs.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer/>
        <dm:status>editing</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>no</dm:translation>
        <dm:languages/>
        <dm:release/>
        <dm:repository/>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-ha-stonithagents">
  <title>STONITH Agents</title>

  <para>
   A cluster sometimes detects that one of the nodes is behaving strangely
   and needs to remove it. This is called <emphasis>fencing</emphasis> and
   is commonly done with a STONITH resource. 
  </para>

  <warning>
   <title>External SSH/STONITH Are Not Supported</title>
   <para>
    It is impossible to know how SSH might react to other system problems.
    For this reason, external SSH/STONITH agents (like
    <literal>stonith:external/ssh</literal>) are not supported for
    production environments. If you still want to use such agents for
    testing, install the
    <package>libglue-devel</package> package.
   </para>
  </warning>

  <para>
   To get a list of all currently available STONITH devices (from the
   software side), use the command <command>crm ra list stonith</command>.
   If you do not find your favorite agent, install the
   <package>-devel</package> package.
   For more information on STONITH devices and resource agents, 
   see <xref linkend="cha-ha-fencing"/>.
  </para>

  <para>
   As of yet there is no documentation about writing STONITH agents. If
   you want to write new STONITH agents, consult the examples available
   in the source of the
   <package>cluster-glue</package> package.
  </para>
 </sect1>
 <sect1 xml:id="sec-ha-writingresourceagents">
  <title>Writing OCF Resource Agents</title>

  <para>
   All OCF resource agents (RAs) are available in
   <filename>/usr/lib/ocf/resource.d/</filename>, see
   <xref linkend="sec-ha-config-basics-raclasses"/> for more information.
   Each resource agent must supported the following operations to control
   it:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>start</command>
    </term>
    <listitem>
     <para>
      start or enable the resource
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>stop</command>
    </term>
    <listitem>
     <para>
      stop or disable the resource
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>status</command>
    </term>
    <listitem>
     <para>
      returns the status of the resource
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>monitor</command>
    </term>
    <listitem>
     <para>
      similar to <command>status</command>, but checks also for unexpected
      states
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>validate</command>
    </term>
    <listitem>
     <para>
      validate the resource's configuration
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>meta-data</command>
    </term>
    <listitem>
     <para>
      returns information about the resource agent in XML
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The general procedure of how to create an OCF RA is like the following:
  </para>

  <procedure>
   <step>
    <para>
     Load the file
     <filename>/usr/lib/ocf/resource.d/pacemaker/Dummy</filename> as a
     template.
    </para>
   </step>
   <step>
    <para>
     Create a new subdirectory for each new resource agents to avoid naming
     contradictions. For example, if you have a resource group
     <systemitem>kitchen</systemitem> with the resource
     <systemitem>coffee_machine</systemitem>, add this resource to the directory
     <filename>/usr/lib/ocf/resource.d/kitchen/</filename>. To access this
     RA, execute the command <command>crm</command>:
    </para>
<screen><prompt role="root">root # </prompt><command>crm</command> configure primitive coffee_1 ocf:coffee_machine:kitchen ...</screen>
   </step>
   <step>
    <para>
     Implement the different shell functions and save your file under a
     different name.
    </para>
   </step>
  </procedure>

  <para>
   More details about writing OCF resource agents can be found at
   <link xlink:href="http://www.linux-ha.org/wiki/Resource_Agents"/>. Find
   special information about several concepts at
   <xref linkend="cha-ha-concepts"/>.
  </para>
 </sect1>
 <xi:include href="ha_error_codes.xml"/>
</chapter>
